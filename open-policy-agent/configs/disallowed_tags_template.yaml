apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sdisallowedtags
spec:
  crd:
    spec:
      names:
        kind: K8sDisallowedTags
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            exemptImages:
              description: 'Exclude containers that have images which match these
                exclusion rules. Prefix matching can be used with `*`.'
              type: array
              items:
                type: string
            tags:
              description: 'Disallowed container image tags.'
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      libs:
      - |
        package lib.exempt_container

        is_exempt(container) {
          exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
          img := container.image
          exemption := exempt_images[_]
          _matches_exemption(img, exemption)
        }

        _matches_exemption(img, exemption) {
          not endswith(exemption, "*")
          exemption == img
        }

        _matches_exemption(img, exemption) {
          endswith(exemption, "*")
          prefix := trim_suffix(exemption, "*")
          startswith(img, prefix)
        }
      rego: |
        package k8sdisallowedtags

        import data.lib.exempt_container.is_exempt

        violation[{"msg": msg}] {
          container := input_containers[_]
          not is_exempt(container)
          tags := [forbid | tag = input.parameters.tags[_]; forbid = endswith(container.image, concat(":", ["", tag]))]
          any(tags) 
          msg := sprintf("Container [%v] uses a disallowed tag [%v]. Disallowed tags are [%v]", [container.name, container.image, input.parameters.tags])
        }

        violation[{"msg": msg}] {
          container := input_containers[_]
          not is_exempt(container)
          tag := [contains(container.image, ":")]
          not all(tag)
          msg := sprintf("Container [%v] didn't specity an image tag [%v]", [container.name, container.image])
        }

        input_containers[c] {
          c := input.review.object.spec.containers[_]
        }

        input_containers[c] {
          c := input.review.object.spec.initContainers[_]
        }

        input_containers[c] {
          c := input.review.object.spec.ephemeralContainers[_]
        }
